[
    {
        "repo_url": "demo_repo",
        "commit_hash": "c_py_2",
        "filepath": "file_py_2.py",
        "before_code": "def vulnerable_code(): eval('1')",
        "after_code": "def secure_code(): pass",
        "language": "python",
        "commit_message": "Security fix CVE-2023-9999",
        "parsing_successful": true,
        "before_ast_str": "...",
        "after_ast_str": "...",
        "code": "def vulnerable_code(): eval('1')",
        "ast_str": "Module(\n    body=[\n        FunctionDef(\n            name='vulnerable_code',\n            args=arguments(\n                posonlyargs=[],\n                args=[],\n                kwonlyargs=[],\n                kw_defaults=[],\n                defaults=[]),\n            body=[\n                Expr(\n                    value=Call(\n                        func=Name(id='eval', ctx=Load()),\n                        args=[\n                            Constant(value='1')],\n                        keywords=[]))],\n            decorator_list=[])],\n    type_ignores=[])",
        "label": 1
    },
    {
        "repo_url": "demo_repo",
        "commit_hash": "c_java_1",
        "filepath": "file_java_1.java",
        "before_code": "public class Buggy {\n    int a = 0;\n}",
        "after_code": "public class Buggy {\n    int a = 1;\n}",
        "language": "java",
        "commit_message": "Fix java null ptr",
        "parsing_successful": true,
        "before_ast_str": "...",
        "after_ast_str": "...",
        "code": "public class Buggy {\n    int a = 0;\n}",
        "ast_str": "CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=a)], documentation=None, modifiers=set(), type=BasicType(dimensions=[], name=int))], documentation=None, extends=None, implements=None, modifiers={'public'}, name=Buggy, type_parameters=None)])",
        "label": 1
    },
    {
        "repo_url": "demo_repo",
        "commit_hash": "c_java_1",
        "filepath": "file_java_1.java",
        "before_code": "public class Buggy {\n    int a = 0;\n}",
        "after_code": "public class Buggy {\n    int a = 1;\n}",
        "language": "java",
        "commit_message": "Fix java null ptr",
        "parsing_successful": true,
        "before_ast_str": "...",
        "after_ast_str": "...",
        "code": "public class Buggy {\n    int a = 1;\n}",
        "ast_str": "CompilationUnit(imports=[], package=None, types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), name=a)], documentation=None, modifiers=set(), type=BasicType(dimensions=[], name=int))], documentation=None, extends=None, implements=None, modifiers={'public'}, name=Buggy, type_parameters=None)])",
        "label": 0
    },
    {
        "repo_url": "demo_repo",
        "commit_hash": "c_py_2",
        "filepath": "file_py_2.py",
        "before_code": "def vulnerable_code(): eval('1')",
        "after_code": "def secure_code(): pass",
        "language": "python",
        "commit_message": "Security fix CVE-2023-9999",
        "parsing_successful": true,
        "before_ast_str": "...",
        "after_ast_str": "...",
        "code": "def secure_code(): pass",
        "ast_str": "Module(\n    body=[\n        FunctionDef(\n            name='secure_code',\n            args=arguments(\n                posonlyargs=[],\n                args=[],\n                kwonlyargs=[],\n                kw_defaults=[],\n                defaults=[]),\n            body=[\n                Pass()],\n            decorator_list=[])],\n    type_ignores=[])",
        "label": 0
    },
    {
        "repo_url": "demo_repo",
        "commit_hash": "c_py_1",
        "filepath": "file_py_1.py",
        "before_code": "def old_py(x):\n    return x - 1 #bug",
        "after_code": "def new_py(x):\n    return x + 1",
        "language": "python",
        "commit_message": "Fix py logic",
        "parsing_successful": true,
        "before_ast_str": "...",
        "after_ast_str": "...",
        "code": "def new_py(x):\n    return x + 1",
        "ast_str": "Module(\n    body=[\n        FunctionDef(\n            name='new_py',\n            args=arguments(\n                posonlyargs=[],\n                args=[\n                    arg(arg='x')],\n                kwonlyargs=[],\n                kw_defaults=[],\n                defaults=[]),\n            body=[\n                Return(\n                    value=BinOp(\n                        left=Name(id='x', ctx=Load()),\n                        op=Add(),\n                        right=Constant(value=1)))],\n            decorator_list=[])],\n    type_ignores=[])",
        "label": 0
    }
]